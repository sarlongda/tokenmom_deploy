<script type="text/javascript">
    jQuery(function($) {
        $(document).ready(function() {
            web3_load();
            //Configure Golbal variables
            const perPage = 25;
            var defaultOpts = {
                totalPages: $(".hidden-token-contents input").length / perPage
            };
            const DECIMALS = 18;
            const gas_limit = 0.02;
            
            //Wrap ETH Event
            $(document).on('click','.btn-wrap',function(e){
                let wrap_amount = parseFloat($(".wrap-amount").val());
                if(check_amount("wrap",wrap_amount)){
                    wrap_eth(wrap_amount);
                }                                      
                e.preventDefault();
            });
            //UnWrap WETH Event
            $(document).on('click','.btn-unwrap',function(e){
                let unwrap_amount = $(".unwrap-amount").val();
                if(check_amount("unwrap",unwrap_amount)){
                    unwrap_weth(unwrap_amount);
                }                                      
                e.preventDefault();
            });
            //Wrap input value change Event
            $(".wrap-amount").on("change paste keyup",function() {
                let wrap_amount = $(this).val();
                check_amount("wrap",wrap_amount);
            });
            //UnWrap input value change Event
            $(".unwrap-amount").on("change paste keyup",function() {
               let unwrap_amount = $(this).val();
               check_amount("unwrap",unwrap_amount);
            });
            $(document).on('click', ".wallet-search-btn", function(e){
                var search      = $(".wallet-search-input").val();
                var prev_search = $(".wallet-prev-search").val();
                if(search != prev_search){
                    $(".wallet-prev-search").val(search);
                    _handlePageClick(1);
                    _initPagination();
                }
            });
            $(document).on('change keyup', ".wallet-search-input", function(){
                var search      = $(".wallet-search-input").val();
                var prev_search = $(".wallet-prev-search").val();
                if(search != prev_search){
                    $(".wallet-prev-search").val(search);
                    _handlePageClick(1);
                    _initPagination();
                }
            });
            $(document).on('change', "#wallet_my_tokens", function (e) {
                _handlePageClick(1);
                _initPagination();
            });
            $(document).on('change',".wal-weth-allow",function(e){
                let element = $(this);
                
                let parent = $(this).parent().parent();
                parent.find("i").css("display","block");
                parent.find("label").css("display","none");
                if(this.checked){
                    $(this).prop('checked', false);
                    var set_allowance = async () =>{
                        try {
                            const setAllowTxHash = await zeroEx.token.setUnlimitedProxyAllowanceAsync(wethAddress, currentWalletAddress, txOpts);
                            const reception_message   = await zeroEx.awaitTransactionMinedAsync(setAllowTxHash);
                            if(reception_message.status === 1){
                                element.prop('checked', true);                                
                            }
                        } catch (e) {

                        } finally {
                            parent.find("i").css("display","none");
                            parent.find("label").css("display","block");
                        }
                    };
                    set_allowance().catch(console.error);
                } else {
                    $(this).prop('checked', true);
                    var set_unallowance = async () =>{
                        try {
                            const unallowamount     = new BigNumber(0);
                            const setUnallowTxHash  = await zeroEx.token.setProxyAllowanceAsync(wethAddress, currentWalletAddress, unallowamount, txOpts);
                            const reception_message_unallowance = await zeroEx.awaitTransactionMinedAsync(setUnallowTxHash);
                            if(reception_message_unallowance.status === 1){
                                element.prop('checked', false);
                                //$(".token-item-" + td_symbol.text()).data("balance", false);
                            }
                        } catch (e) {
                        } finally {
                            parent.find("i").css("display","none");
                            parent.find("label").css("display","block");
                        }
                    };
                    set_unallowance().catch(console.error);
                }
            });
            $(document).on('change', ".wallet-token-allow", function(e){
                let element     = $(this);
                let td_parent   = element.parent().parent().parent();
                let td_addr     = td_parent.prev().prev();
                let td_symbol   = td_addr.prev().prev();
                let token_addr  = td_addr.text();               
                td_parent.removeClass("wallet-allowance-loaded").addClass("wallet-allowance-loading");
                if(this.checked){
                    $(this).prop('checked', false);
                    var set_allowance = async () =>{
                        try {
                            const setTakerAllowTxHash = await zeroEx.token.setUnlimitedProxyAllowanceAsync(token_addr, currentWalletAddress, txOpts);
                            const reception_message   = await zeroEx.awaitTransactionMinedAsync(setTakerAllowTxHash);
                            if(reception_message.status === 1){
                                element.prop('checked', true);
                                $(".token-item-" + td_symbol.text()).data("balance", true);
                            }
                        } catch (e) {

                        } finally {
                            td_parent.removeClass("wallet-allowance-loading").addClass("wallet-allowance-loaded");
                        }
                    };
                    set_allowance().catch(console.error);
                } else {
                    $(this).prop('checked', true);
                    var set_unallowance = async () =>{
                        try {
                            const unallowamount     = new BigNumber(0);
                            const setUnallowTxHash  = await zeroEx.token.setProxyAllowanceAsync(token_addr, currentWalletAddress, unallowamount, txOpts);
                            const reception_message_unallowance = await zeroEx.awaitTransactionMinedAsync(setUnallowTxHash);
                            if(reception_message_unallowance.status === 1){
                                element.prop('checked', false);
                                $(".token-item-" + td_symbol.text()).data("balance", false);
                            }
                        } catch (e) {

                        } finally {
                            td_parent.removeClass("wallet-allowance-loading").addClass("wallet-allowance-loaded");
                        }
                    };
                    set_unallowance().catch(console.error);
                }
            });
            $(document).on('click','.eth-sync',function(e){
                $(".eth-balance").find("i").css("display","block");
                $(".eth-balance").find("span").css("display","none");
                //get eth balance
                web3.eth.getBalance(currentWalletAddress,(error,balance)=>{
                    let eth_balance = parseFloat(web3.fromWei(balance.toNumber(),"ether")).toFixed(6);
                    $(".eth-balance").find("i").css("display","none");
                    $(".eth-balance").find("span").css("display","block");
                    $(".eth-balance").find("span").text(eth_balance);
                });
            });
            $(document).on('click','.weth-sync',function(e){
                $(".weth-balance").find("i").css("display","block");
                $(".weth-balance").find("span").css("display","none");
                 //get weth balance
                let contract_abi = human_standard_token_abi;
                let token_contract_addr = wethAddress;  // WETH Address;
                let token_contract = web3.eth.contract(contract_abi).at(token_contract_addr);
                token_contract.balanceOf(currentWalletAddress,(error,balance) =>{
                    let weth_balance = parseFloat(web3.fromWei(balance.toNumber(),"ether")).toFixed(6);                    
                    $(".weth-balance").find("i").css("display","none");
                    $(".weth-balance").find("span").css("display","block");
                    $(".weth-balance").find("span").text(weth_balance);
                });
            });
            $(document).on('click', '.wb-sync', function (e) {                
                let td_balance    = $(this).parent();
                let td_address    = td_balance.prev();
                let td_name       = td_address.prev();
                let td_symbol     = td_name.prev();
                let td_allowance  = td_balance.next();
                let token_addr    = td_address.text();
                td_balance.removeClass("wallet-balance-loaded").addClass("wallet-balance-loading");
                // get balance
                let contractABI   = human_standard_token_abi;
                let tokenContract = web3.eth.contract(contractABI).at(token_addr);
                try{                    
                    let token_decimal;                    
                    tokenContract.decimals((error,decimal)=>{                        
                        token_decimal = decimal.toNumber();
                        tokenContract.balanceOf(address,(error,balance) =>{                            
                            token_balance = (balance.toNumber() / Math.pow(10,token_decimal));
                            td_balance.find(".wb-value").text(token_balance);
                            $(".token-item-" + td_symbol.text()).data("balance", token_balance);                                                                         
                        });                        
                    });                  
                } catch (e) {
                    td_balance.find(".wb-value").text(0);
                    $(".token-item-" + td_symbol.text()).data("balance", 0);
                } finally {
                    td_balance.removeClass("wallet-balance-loading").addClass("wallet-balance-loaded");
                }
            });
            $(document).on('click', "#wallet_btn", function (e) {
                if(currentWalletAddress !== undefined){
                    $("#overview_widget").children("aside").removeClass("is-active");
                    document.getElementById("wallet_widget").children[0].classList.add('is-active');
                    get_balance();
                    _queryAllTokens();
                    window.wallet_pagination = $('#pagination').twbsPagination({
                        totalPages: Math.ceil($(".hidden-token-contents input").length / perPage),
                        visiblePages: 10,
                        startPage: 1,
                        first: '<<',
                        prev: '<',
                        next: '>',
                        last: '>>',
                        onPageClick: function (event, page) {
                            _handlePageClick(page);
                        }
                    });
                } else {
                    //alert("You must connect a wallet");
                    $("#no_wallet").css("display","block");
                    window.setTimeout(function(){            
                        $("#no_wallet").css("display","none");
                    },2000);
                }
            });            
            $(document).on('click', ".closebtn", function (e) {
                document.getElementById("wallet_widget").children[0].classList.remove('is-active');
            });
            $(document).on('click', ".wallet-token-symbol",function(e) {
                sort_table_by_symbol();
                /* data = {
                    type:"symbol",
                    dir:"desc"
                };
                $.ajax({
                    url: 'get_sort_token_list',
                    type: 'POST',
                    dataType: 'json',
                    data: data,
                    success: function(data) {  
                        console.log("----");  
                                                                          
                    },
                    error: function(error) {
                        console.log(error);
                    }
                });  */  

                
            });
            $(document).on('click', ".wallet-token-name",function(e) {
                sort_table_by_name();
                
            });
            $(document).on('click', ".wallet-token-balance",function(e) {
                sort_table_by_balance();
                
            });
            function sort_table_by_symbol(){
                var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
                table = document.getElementsByClassName("wallet-token-list")[0];
                switching = true;
                dir = "asc";
                while (switching) {
                    switching = false;
                    rows = table.rows;
                    for(i = 0; i< (rows.length - 1); i ++){
                        shouldSwitch = false;
                        x = rows[i].getElementsByTagName("TD")[0];
                        y = rows[i + 1].getElementsByTagName("TD")[0];

                        if(dir == "asc") {
                            if(x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()){
                                shouldSwitch = true;
                                break;
                            }
                        } else if(dir == "desc") {
                            if(x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()){
                                shouldSwitch = true;
                                break;
                            }
                        }
                    }
                    if (shouldSwitch) {
                        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                        switching = true;
                        switchcount ++;
                    } else {
                        if (switchcount == 0 && dir == "asc") {
                            dir = "desc";
                            switching = true;
                        }
                    }
                }
            }
            function sort_table_by_balance(){
                var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
                table = document.getElementsByClassName("wallet-token-list")[0];
                switching = true;
                dir = "asc";
                while (switching) {
                    switching = false;
                    rows = table.rows;
                    for(i = 0; i< (rows.length - 1); i ++){
                        shouldSwitch = false;
                        x = rows[i].getElementsByTagName("TD")[3].children[1].innerHTML;
                        y = rows[i + 1].getElementsByTagName("TD")[3].children[1].innerHTML;

                        if(dir == "asc") {
                            if(Number(x) > Number(y)){
                                shouldSwitch = true;
                                break;
                            }
                        } else if(dir == "desc") {
                            if(Number(x) < Number(y)){
                                shouldSwitch = true;
                                break;
                            }
                        }
                    }
                    if (shouldSwitch) {
                        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                        switching = true;
                        switchcount ++;
                    } else {
                        if (switchcount == 0 && dir == "asc") {
                            dir = "desc";
                            switching = true;
                        }
                    }
                }
            }
            function sort_table_by_name(){
                var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
                table = document.getElementsByClassName("wallet-token-list")[0];
                switching = true;
                dir = "asc";
                while (switching) {
                    switching = false;
                    rows = table.rows;
                    for(i = 0; i< (rows.length - 1); i ++){
                        shouldSwitch = false;
                        x = rows[i].getElementsByTagName("TD")[1];
                        y = rows[i + 1].getElementsByTagName("TD")[1];

                        if(dir == "asc") {
                            if(x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()){
                                shouldSwitch = true;
                                break;
                            }
                        } else if(dir == "desc") {
                            if(x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()){
                                shouldSwitch = true;
                                break;
                            }
                        }
                    }
                    if (shouldSwitch) {
                        rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                        switching = true;
                        switchcount ++;
                    } else {
                        if (switchcount == 0 && dir == "asc") {
                            dir = "desc";
                            switching = true;
                        }
                    }
                }
            }
            function wrap_eth(amount){
                let wrap_eth = async () => {
                    $(".btn-wrap").addClass("disabled");
                    $(".btn-wrap").append("<i class='fa fa-spinner fa-spin'></i>");
                    const ethAmount = new BigNumber(amount);
                    const ethToConvert = ZeroEx.ZeroEx.toBaseUnitAmount(ethAmount,DECIMALS);
                    const weth_addr = wethAddress;
                    
                    try{
                        const convertEthTxHash = await zeroEx.etherToken.depositAsync(weth_addr,ethToConvert,currentWalletAddress,txOpts);
                        await zeroEx.awaitTransactionMinedAsync(convertEthTxHash);
                    //refresh amount
                        get_balance();
                        $(".btn-wrap").find("i").remove();
                        
                        $(".wrap-amount").val("");
                        

                    }catch(e){
                        $(".btn-wrap").find("i").remove();
                        
                        $(".wrap-amount").val("");
                        
                    }
                };
                wrap_eth().catch(console.error);
            }
            function unwrap_weth(amount){
                let unwrap_weth = async () => {  
                    $(".btn-unwrap").addClass("disabled");                  
                    $(".btn-unwrap").append("<i class='fa fa-spinner fa-spin'></i>");
                    const ethAmount = new BigNumber(amount);
                    const ethToConvert = ZeroEx.ZeroEx.toBaseUnitAmount(ethAmount,DECIMALS);
                    const weth_addr = wethAddress;
                    
                    try{
                        const convertEthTxHash = await zeroEx.etherToken.withdrawAsync(weth_addr,ethToConvert,currentWalletAddress,txOpts);
                        await zeroEx.awaitTransactionMinedAsync(convertEthTxHash);
                        get_balance();
                        $(".btn-unwrap").find("i").remove();
                        
                        $(".unwrap-amount").val("");
                    }catch(e){
                        $(".btn-unwrap").find("i").remove();
                        
                        $(".unwrap-amount").val("");
                    }                    
                };
                unwrap_weth().catch(console.error)
            }
            function check_amount(type,amount){
                $(".wrap-alert").text("");
                $(".unwrap-alert").text("");
                if(isNaN(amount) || amount == null || amount == ''){                    
                    if(type == "wrap"){
                        $(".wrap-alert").text("Amount required");
                        $(".btn-wrap").addClass("disabled");
                    }else if(type == "unwrap"){                        
                        $(".unwrap-alert").text("Amount required");
                        $(".btn-wrap").addClass("disabled");
                    }
                    return false;
                }else{
                    if(type == "wrap"){
                        let wallet_amount = parseFloat($(".eth-balance").find("span").text());
                        if(amount == 0){
                            $(".wrap-alert").text("Amount can not 0");
                            $(".btn-wrap").addClass("disabled");

                        }
                        else if(amount > wallet_amount){
                            $(".wrap-alert").text("Insuffient Amount");
                            $(".btn-wrap").addClass("disabled");
                            return false;
                        }else{                            
                            if(parseFloat(amount) + gas_limit > wallet_amount){
                                $(".wrap-alert").text("You have to think of gas costs");
                                $(".btn-wrap").addClass("disabled");
                                return false;
                            }else{
                                $(".btn-wrap").removeClass("disabled");
                                return true;
                            }
                        }
                        
                    }else if(type == "unwrap"){
                        let wallet_amount = parseFloat($(".weth-balance").find("span").text());
                        if(amount == 0){
                            $(".unwrap-alert").text("Amount can not 0");
                            $(".btn-unwrap").addClass("disabled");
                        }
                        else if(amount > wallet_amount){
                            $(".unwrap-alert").text("Insuffient Amount");
                            $(".btn-unwrap").addClass("disabled");
                            return false;
                        }else {
                            $(".btn-unwrap").removeClass("disabled");
                            return true;
                        }                        
                    }
                }                
            }
            function get_balance(){                
                //get weth balance
                let contract_abi = human_standard_token_abi;
                let token_contract_addr = wethAddress;  // WETH Address;
                let token_contract = web3.eth.contract(contract_abi).at(token_contract_addr);
                token_contract.balanceOf(currentWalletAddress,(error,balance) =>{
                    let weth_balance = parseFloat(web3.fromWei(balance.toNumber(),"ether")).toFixed(6);
                    $(".weth-balance").find("i").css("display","none");
                    $(".weth-balance").find("span").css("display","block");
                    $(".weth-balance").find("span").text(weth_balance);
                    if($(".wallet-balance-WETH") != undefined && $(".wallet-balance-WETH" != null)){
                        $(".wallet-balance-WETH .wb-value").text(weth_balance);
                    }
                });
                //get eth balance                
                web3.eth.getBalance(currentWalletAddress,(error,balance)=>{
                    let eth_balance = parseFloat(web3.fromWei(balance.toNumber(),"ether")).toFixed(6);
                    $(".eth-balance").find("i").css("display","none");
                    $(".eth-balance").find("span").css("display","block");
                    $(".eth-balance").find("span").text(eth_balance);
                });
                //get weth allowance
                //get token allowance;
                let get_allowance = async () => {
                    try {
                        let weth_allowed = false;
                        //get weth allowance;
                        let weth_status = await zeroEx.token.getProxyAllowanceAsync(wethAddress, currentWalletAddress);
                        if(weth_status.toNumber() === 0){
                            weth_allowed = false;
                        }else{
                            weth_allowed = true;
                        }
                        if(weth_allowed == true){                            
                            $('.wallet-weth-allow').find('label').find('input').prop('checked',true);
                            $('.wallet-weth-allow').find('i').css('display','none');
                            $('.wallet-weth-allow').find('label').css('display','block');
                        }else{
                            $('.wallet-weth-allow').find('label').find('input').prop('checked',false);
                            $('.wallet-weth-allow').find('i').css('display','none');
                            $('.wallet-weth-allow').find('label').css('display','block');
                        }
                        
                    }catch(e){
                 }finally{
                 }
                };
                get_allowance().catch(console.error);
            }
            function web3_load(){
                var contract_abi = human_standard_token_abi;
                var provider;
            }
            function _queryAllTokens(){
                if(currentWalletAddress !== undefined && currentWalletAddress != null && currentWalletAddress !== 0){
                    $(".hidden-token-contents input").each(function(index){
                        let element     = $(this);
                        let symbol      = $(this).data("symbol");
                        let name        = $(this).data("name");
                        let token_addr  = $(this).data("address");
                        $(this).data("balance", undefined);
                        $(this).data("allowance", false);
                        // get balance
                        let contractABI   = human_standard_token_abi;
                        let tokenContract = web3.eth.contract(contractABI).at(token_addr);
                        let get_balance = async () => {
                            try {                                
                                token_contract_addr = token_addr    //Token Address
                                var contractAddress = token_contract_addr; // Token Address
                                let address = currentWalletAddress;
                                let token_decimal;                    
                                tokenContract.decimals((error,decimal)=>{                        
                                    token_decimal = decimal.toNumber();
                                    tokenContract.balanceOf(address,(error,balance) =>{                            
                                        token_balance = (balance.toNumber() / Math.pow(10,token_decimal));
                                        if(token_decimal > 8){
                                            token_balance = token_balance.toFixed(8);
                                        }else{
                                            token_balance = token_balance.toFixed(token_decimal);
                                        }
                                        element.data("balance", parseFloat(token_balance));
                                        if($(".wallet-balance-" + symbol) !== undefined){
                                            let tb_element = $(".wallet-balance-" + symbol);
                                            tb_element.find(".wb-value").text(parseFloat(token_balance));
                                            tb_element.removeClass("wallet-balance-loading").addClass("wallet-balance-loaded");
                                        }                                                                                   
                                    });                        
                                });                               
                            } catch (e) {
                                element.data("balance", 0);
                                if($(".wallet-balance-" + symbol) !== undefined){
                                    let tb_element = $(".wallet-balance-" + symbol);
                                    tb_element.find(".wb-value").text(0);
                                    tb_element.removeClass("wallet-balance-loading").addClass("wallet-balance-loaded");
                                }
                            }
                        };
                        get_balance().catch(console.error);                        
                        // get allowance status
                        let get_allowance = async () => {
                            try {
                                let allow_status = await zeroEx.token.getProxyAllowanceAsync(token_addr, currentWalletAddress);
                                let is_allowed = false;
                                if (allow_status.toNumber() === 0) {
                                    element.data("allowance", false);
                                    is_allowed = false;
                                } else {
                                    element.data("allowance", true);
                                    is_allowed = true;
                                }
                                if($(".wallet-allowance-" + symbol) !== undefined){
                                    let ta_element = $(".wallet-allowance-" + symbol);
                                    if(is_allowed){
                                        ta_element.find(".wallet-token-allow").prop('checked', true);
                                    } else {
                                        ta_element.find(".wallet-token-allow").prop('checked', false);
                                    }
                                }
                            } catch (e) {
                                if($(".wallet-allowance-" + symbol) !== undefined){
                                    $(".wallet-allowance-" + symbol).find(".wallet-token-allow").prop('disabled', true);
                                }
                            } finally {
                                if($(".wallet-allowance-" + symbol) !== undefined){
                                    $(".wallet-allowance-" + symbol).removeClass("wallet-allowance-loading").addClass("wallet-allowance-loaded");
                                }
                            }
                        };
                        get_allowance().catch(console.error);
                    });
                }
            }
            function _handlePageClick(page){
                $(".wallet-token-list").empty();
                var search      = $(".wallet-search-input").val();
                var count_index = 0;
                var from_index  = perPage * (page - 1) + 1;
                var to_index    = perPage * page;
                let lower_limit = Number.NEGATIVE_INFINITY;
                if($("#wallet_my_tokens").is(':checked')){
                    lower_limit = 0;
                }
                $(".hidden-token-contents input").each(function(index){
                    let symbol    = $(this).data("symbol");
                    let name      = $(this).data("name");
                    let address   = $(this).data("address");
                    let balance   = $(this).data("balance");
                    let allowance = $(this).data("allowance");
                    if(search === "" || symbol.toLowerCase().indexOf(search.toLowerCase()) != -1 || name.toLowerCase().indexOf(search.toLowerCase()) != -1){
                        if(balance === undefined){
                            if(lower_limit === 0){
                            } else {
                                count_index++;
                                if(count_index >= from_index && count_index <= to_index){
                                    let html = '<tr>';
                                    html += '<td><a data-turbolinks="false" href="/exchange/'+symbol + '-WETH'+'">' + symbol + '</a></td>';
                                    html += '<td><a data-turbolinks="false" href="/exchange/'+symbol + '-WETH'+'">' + name + '</a></td>';
                                    html += '<td>' + '<a href="'+http_link+'token/' + address + '" rel="noopener noreferrer" target="_blank">' + address + '</a>' + '</td>';
                                    html += '<td class="wallet-balance-' + symbol + ' wallet-balance-loading">';
                                    html +=   '<div class="wb-loader fa fa-spinner fa-spin"></div>';
                                    html +=   '<div class="wb-value">0</div>';
                                    html +=   '<i class="fa fa-sync wb-sync"></i>';
                                    html += '</td>';
                                    if(allowance === undefined){
                                        html += '<td class="wallet-allowance-' + symbol + ' wallet-allowance-loading">';
                                    } else {
                                        html += '<td class="wallet-allowance-' + symbol + ' wallet-allowance-loaded">';
                                    }
                                    html +=   '<div class="wb-loader fa fa-spinner fa-spin"></div>';
                                    html +=   '<div class="wallow-toggle">';
                                    html +=     '<label class="switch">';
                                    html +=       '<input type="checkbox" class="wallet-token-allow"';
                                    if(allowance){
                                        html += ' checked ';
                                    }
                                    html +=       '>';
                                    html +=       '<span class="slider round"></span>';
                                    html +=     '</label>';
                                    html +=   '</div>';
                                    html += '<td><button class="token-transfer btn btn-success" data-i18n="send" data-toggle="modal" data-target="#send_token_modal">Send</button></td>';                     
                                    
                                    html += '</td>';
                                    html += '</tr>';
                                    $(".wallet-token-list").append(html);
                                }
                            }
                        } else {
                            if(balance > lower_limit){
                                count_index++;
                                if(count_index >= from_index && count_index <= to_index){
                                    let html = '<tr>';
                                    html += '<td>' + symbol + '</td>';
                                    html += '<td>' + name + '</td>';
                                    html += '<td>' + '<a href="' + http_link + 'token/' + address + '" rel="noopener noreferrer" target="_blank">' + address + '</a>' + '</td>';
                                    html += '<td class="wallet-balance-' + symbol + ' wallet-balance-loaded">';
                                    html +=   '<div class="wb-loader fa fa-spinner fa-spin"></div>';
                                    html +=   '<div class="wb-value">' + balance + '</div>';
                                    html +=   '<i class="fa fa-sync wb-sync"></i>';
                                    html += '</td>';
                                    if(allowance === undefined){
                                        html += '<td class="wallet-allowance-' + symbol + ' wallet-allowance-loading">';
                                    } else {
                                        html += '<td class="wallet-allowance-' + symbol + ' wallet-allowance-loaded">';
                                    }
                                    html +=   '<div class="wb-loader fa fa-spinner fa-spin"></div>';
                                    html +=   '<div class="wallow-toggle">';
                                    html +=     '<label class="switch">';
                                    html +=       '<input type="checkbox" class="wallet-token-allow"';
                                    if(allowance){
                                        html += ' checked ';
                                    }
                                    html +=       '>';
                                    html +=       '<span class="slider round"></span>';
                                    html +=     '</label>';
                                    html +=   '</div>';
                                    html += '</td>';
                                    html += '<td><button class="token-transfer btn btn-success" data-i18n="send" data-toggle="modal" data-target="#send_token_modal">Send</button></td>';
                                    html += '</tr>';
                                    $(".wallet-token-list").append(html);
                                }
                            }
                        }
                    }
                });
            }
            function _initPagination(){
                let search      = $(".wallet-search-input").val();
                let count_index = 0;
                $(".hidden-token-contents input").each(function(index){
                    let symbol  = $(this).data("symbol");
                    let name    = $(this).data("name");
                    if(search === "" || symbol.toLowerCase().indexOf(search.toLowerCase()) !== -1 || name.toLowerCase().indexOf(search.toLowerCase()) !== -1){
                        count_index++;
                    }
                });
                window.wallet_pagination.twbsPagination('destroy');
                window.wallet_pagination = $('#pagination').twbsPagination($.extend({}, defaultOpts, {
                    startPage: 1,
                    totalPages: Math.ceil(count_index / perPage),
                    visiblePages: 10,
                    first: '<<',
                    prev: '<',
                    next: '>',
                    last: '>>',
                    onPageClick: function (event, page) {
                        _handlePageClick(page);
                    }
                }));
            }
        });
    });
</script>
